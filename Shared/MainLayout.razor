@inherits LayoutComponentBase
@inject NavigationManager uriHelper
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Lists
@*@inject OrisonSchoolWeb.Service.StudentService _StudentService*@
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<head>
    <link href="css/MainLayout.css" rel="stylesheet" />
</head>
<div id="wrapper">
    <!--header-section  declaration -->
    <div style="border-bottom: solid 1px #00AEFF;">
        <SfToolbar>
            <ToolbarEvents Clicked="@Toggle"></ToolbarEvents>
            <ToolbarItems>
                <ToolbarItem PrefixIcon="fa fa-bars" TooltipText="Menu">
                    <Template>
                        <div class="e-folder">
                            <img src="Images/IcMenu.png" style="width:25px;height:25px;" alt="Orison" class="avatar-xxl mb-1">
                        </div>
                    </Template>
                </ToolbarItem>
                <ToolbarItem>
                    <Template>
                        <div class="e-folder">
                            <img src="Images/Orison_Logo.png" style="width:120px;height:42px;" alt="Orison" class="avatar-xxl mb-1">
                        </div>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Align="@ItemAlign.Center">
                    <Template>
                        <div class="e-folder">
                            <img src="Images/Companylogo.png" style="width: 200px; height: 60px; " alt="Orison" class="avatar-xxl mb-1">
                        </div>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Align="@ItemAlign.Right">
                    <Template>
                        <div>
                            <div class="dropdown">
                                <a class="nav-link d-none d-sm-inline-block" data-bs-toggle="dropdown">
                                    <span style=" vertical-align: super;color: #404E67;"> @UserName</span>
                                </a>
                                <div class="dropdown-content" style="text-align:left;">
                                    <a class="dropdown-item"><i class="oi oi-person"></i> Profile</a>
                                    <a class="dropdown-item" @onclick="LogOutClick"><i class="oi oi-account-logout"></i> Log out</a>
                                </div>
                            </div>
                        </div>
                    </Template>
                </ToolbarItem>
                <ToolbarItem CssClass="e-custom" Align="@ItemAlign.Right">
                    <Template>
                        <div class="image-container">
                            <img height="20" class="img-round" src="Images/avatar.jpg" alt="Orison Admin" />
                        </div>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
    </div>
    <!-- end of header-section -->
    <!-- sidebar element declaration -->
    <SfSidebar HtmlAttributes="@HtmlAttribute" Width="220px" Target=".main-content" @ref="Sidebar" MediaQuery="(min-width:600px)" @bind-IsOpen="SidebarToggle">
        <ChildContent>
            <div class="main-menu">
                <div style="border-bottom: solid 1px #646f83;">
                    <p class="main-menu-header">Orison SPMS</p>
                </div>
                <div>
                    <SfTreeView CssClass="main-treeview" @ref="TreeView" ExpandOn="@Expand" TValue="TreeData">
                        <TreeViewEvents TValue="TreeData" NodeClicked="OnSelect"></TreeViewEvents>
                        <TreeViewFieldsSettings Id="nodeId" Text="nodeText" IconCss="iconCss" DataSource="treedata" HasChildren="hasChild" ParentID="pid">
                        </TreeViewFieldsSettings>
                    </SfTreeView>
                </div>
            </div>
        </ChildContent>
    </SfSidebar>
    <!-- end of sidebar element -->
    <!-- main-content declaration -->
    <div class="main-content" id="main-text">
        <div class="sidebar-content">
            @Body
        </div>
    </div>
</div>

@code{
    SfTreeView<TreeData> TreeView;
    SfSidebar Sidebar;
    public ExpandAction Expand = ExpandAction.Click;
    public bool SidebarToggle = false;
    public string UserName = "", UserID;
    Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>()
{
        {"class", "sidebar-treeview" }
    };
    public void Toggle(ClickEventArgs args)
    {
        if (args.Item.TooltipText == "Menu")
        {
            SidebarToggle = !SidebarToggle;
        }
    }
    public void LogOutClick()
    {
        sessionStorage.ClearAsync();
        localStorage.ClearAsync();
        uriHelper.NavigateTo("Login");
    }
    public void Home_Click()
    {
        uriHelper.NavigateTo("Index");
    }
    public class TreeData
    {
        public string nodeId { get; set; }
        public string nodeText { get; set; }
        public string iconCss { get; set; }
        public bool hasChild { get; set; }
        public string pid { get; set; }
    }
    private List<TreeData> treedata = new List<TreeData>();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        UserName = await sessionStorage.GetItemAsync<string>("Username");
        UserID = await sessionStorage.GetItemAsync<string>("LocalSessionUserId");
        if (UserName == "" || UserName == null)
        {
            uriHelper.NavigateTo("Login");
        }
        else
        {
            treedata.Add(new TreeData { nodeId = "01", nodeText = "Dashboard", iconCss = "fa fa-tachometer" });
            treedata.Add(new TreeData { nodeId = "02", nodeText = "Job Register", iconCss = "fa fa-list-alt" });
            treedata.Add(new TreeData { nodeId = "03", nodeText = "Job Status", iconCss = "fa fa-tasks" });
            treedata.Add(new TreeData { nodeId = "04", nodeText = "Spare Parts", iconCss = "fa fa-cogs" });
            treedata.Add(new TreeData { nodeId = "05", nodeText = "Carts", iconCss = "fa fa-file-o" });
            treedata.Add(new TreeData { nodeId = "06", nodeText = "Orders", iconCss = "fa fa-file-o" });
        }

        //if (UserID != null)
        //{
        //    uriHelper.NavigateTo("Index");
        //}
        //else
        //{
        //    await localStorage.ClearAsync();
        //    uriHelper.NavigateTo("Login");
        //}

    }

    //public void OnSelect(NodeSelectEventArgs args)
    //[Microsoft.AspNetCore.Components.Inject]

    //protected Microsoft.JSInterop.IJSRuntime theJavaScriptEngine { get; set; }

    //[Microsoft.AspNetCore.Components.Inject]

    //protected Microsoft.AspNetCore.Components.NavigationManager theNavigationManager { get; set; }

    //protected override void OnAfterRender(bool bFirstRender)
    //{
    //    try
    //    {
    //        if (bFirstRender)
    //        {
    //            theJavaScriptEngine.InvokeAsync<System.Object>("setupUserIdleTimer", new object[] { Microsoft.JSInterop.DotNetObjectReference.Create(this), 5000000 });

    //            this.StateHasChanged();
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        //ClearLocalStorage();
    //    }

    //}
    public void OnSelect(NodeClickEventArgs args)
    {
        if (args.NodeData.Text == "Dashboard")
        {
            uriHelper.NavigateTo(uriHelper.BaseUri + "Index");
        }
        else if (args.NodeData.Text == "Job Register")
        {
            uriHelper.NavigateTo(uriHelper.BaseUri + "JobRegister");
        }
        else if (args.NodeData.Text == "Job Status")
        {
            uriHelper.NavigateTo(uriHelper.BaseUri + "jobstatus");
        }
        else if (args.NodeData.Text == "Spare Parts")
        {
            uriHelper.NavigateTo(uriHelper.BaseUri + "SparePartsRegister");
        }
        else if (args.NodeData.Text == "Carts")
        {
            uriHelper.NavigateTo(uriHelper.BaseUri + "SparePartsCarts");
        }
        else if (args.NodeData.Text == "Orders")
        {
            uriHelper.NavigateTo(uriHelper.BaseUri + "SparePartsOrders");
        }
        StateHasChanged();
    }
}

