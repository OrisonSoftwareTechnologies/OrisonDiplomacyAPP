@page "/JobRegister"
@using Syncfusion.Blazor.Inputs
@using AdminDiplomacyAPP.Entities
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using Microsoft.AspNetCore.Components;
@using AdminDiplomacyAPP.Services
@using Syncfusion.Blazor.Data
@using System.Net
@using System.Threading
@using System.IO
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AdminDiplomacyAPP.Contract.IJobRegister _Jobs
@inject AdminDiplomacyAPP.Contract.ISMSManager _SmsManager
@inject ClipboardService ClipboardService
@inject IJSRuntime JSRuntime
@inject AdminDiplomacyAPP.Contract.BoldReport.IBoldReportManager _Bold

<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />

    @*<style>
            label {
                display: inline-block;
                margin-bottom: 0rem;
            }

            .MyIndexClass::after {
                content: attr(data-index);
            }

            .my-grid .dxbs-filter-row th:nth-child(1) div {
                display: none;
            }

            .e-grid .e-altrow {
                background-color: #E8EEFA;
            }

            .e-grid .e-headercell {
                background-image: linear-gradient( 0deg, #5f368d85, #B7D8DC);
            }

            .e-columnheader {
                height: 30px;
            }

            .e-grid .e-rowcell {
                font-size: 12px;
            }

            .e-grid .e-filterbarcell, .e-grid .e-filterbarcelldisabled {
                background-image: linear-gradient( 0deg, #5f368d85, #B7D8DC);
            }

            .gridimg {
                display: block;
                margin-left: auto;
                margin-right: auto;
                width: 50%;
            }

            .e-btn2 {
                cursor: pointer;
                background-color: transparent;
                border-color: #007bff;
                color: #007bff;
            }

            .e-btn .e-btn-icon {
                width: 1.5em;
            }

            .e-upload-picture::before {
                content: '\e724';
                font-family: e-icons;
            }

            .e-grid .e-gridheader {
                border-bottom-color: #dee2e6;
                border-top-color: #dee2e6;
                color: #212529;
                background-image: linear-gradient( 0deg, #5f368d85, #B7D8DC);
            }
        </style>*@
</head>

<div class="row" style="padding-bottom: 10px; border-bottom: solid 1px #000;">
    <div class="col-md-9">
        <SfButton @onclick="ExcelExport" IconCss="Icon excel" CssClass="e-outline" Content="Excel" IsPrimary="true" />
        <SfButton @onclick="ExportPdf" IconCss="Icon pdf" CssClass="e-outline" Content="Pdf" IsPrimary="true" />

        <SfTextBox @ref="search" Input="OnInput" Placeholder="Global Search" Width="140px" ShowClearButton="true" CssClass="e-btn2" ValueChange="OnSearch" Created="@onCreateSearch"></SfTextBox>

        <SfButton IconCss="Icon filter" CssClass="e-btn2" @onclick="@Clear_Click" IsPrimary="false" />
        <SfButton OnClick="ShowColumnChooser" IconCss="Icon columnchooser" CssClass="e-btn2" IsPrimary="false"></SfButton>

        <SfDatePicker TValue="DateTime?" Width="110px" Format="dd/MM/yyyy" @bind-Value="@StartDate" Placeholder='Start Date'></SfDatePicker>
        <SfDatePicker TValue="DateTime?" Width="110px" Format="dd/MM/yyyy" @bind-Value="@EndDate" Placeholder='End Date'></SfDatePicker>

        <SfButton IconCss="Icon search" CssClass="e-btn2" @onclick="@Search_Click" IsPrimary="false" />

        <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsCopy" AutoHide="true">
            Job Copied To Clipboard <a><i class="fa fa-check" aria-hidden="true"></i></a>
        </BlazorStrap.BSAlert>
    </div>
    <div class="col-md-3">
        <label style="color: #014164; font-size: large; display: flex; justify-content: right; font-weight: bold; ">Job Register</label>
    </div>
</div>

<div style="margin-top:5px;">
    @if (JobData == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="table-responsive" style="position: relative; min-height:600px; min-width: 300px ">
            <SfGrid DataSource="@JobData" ID="Grid" @ref="GridJobMaster" AllowFiltering="true" AllowPaging="true" AllowExcelExport="true"
                    AllowPdfExport="true" Height="560" Width="100%" ShowColumnChooser="true" AllowResizing="true"
                    AllowSorting="true" EnableAltRow="true" RowHeight="24">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                <GridPageSettings PageSize="50"></GridPageSettings>

                <GridTemplates>
                    <DetailTemplate>
                        @{
                            var status = (context as dtJobRegister);
                            <SfGrid TValue="dtVoucherStatus" DataSource="@StatusList" Query="@(new Query().Where("VID", "equal", status.ID))"
                                    RowHeight="25" Width="800px" GridLines="GridLine.Both" AllowResizing="true">
                                <GridColumns>
                                    <GridColumn Field=@nameof(dtVoucherStatus.Staff) HeaderText="Staff" Width="120px"></GridColumn>
                                    <GridColumn Field=@nameof(dtVoucherStatus.Status) HeaderText="Status" Width="100px"></GridColumn>
                                    <GridColumn Field=@nameof(dtVoucherStatus.Remarks) HeaderText="Remarks" Width="150px"></GridColumn>
                                    <GridColumn Field=@nameof(dtVoucherStatus.StatusDate) HeaderText="Status Date" Format="dd/MM/yyyy hh:mm" Width="120px"></GridColumn>
                                    <GridColumn Field=@nameof(dtVoucherStatus.Department) HeaderText="Department" Width="120px"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        }
                    </DetailTemplate>
                </GridTemplates>

                <GridColumns>

                    <GridColumn HeaderText="*" Width="30px">
                        <Template>
                            @{
                                var JobID = (context as dtJobRegister).ID;
                                <a @onclick="@(() => { EditDetails_Click(JobID); })"><img src="Images/edit1.png" style="display: block; margin-left: auto; margin-right: auto; width: 20px; cursor: pointer;" /></a>
                            }
                        </Template>
                    </GridColumn>

                    <GridColumn HeaderText="" Width="30px">
                        <Template>
                            @{ var JobID = (context as dtJobRegister).ID;
                                var enc = JobID * 3;
                <a value="@copyTExt" @onclick="@(async () => await PreviewClick(JobID))"><img src="Images/OFPrePrint.png" alt="Copy Job URL" style="display: block; margin-left: auto; margin-right: auto; width: 20px; cursor: pointer;" /></a> }
                        </Template>
                    </GridColumn>

                    <GridColumn HeaderText="" Width="30px">
                        <Template>
                            @{ var JobID = (context as dtJobRegister).ID;
                                var enc = JobID * 3;
                <a value="@copyTExt" @onclick="@(async () => await PrintClick(JobID))"><img src="Images/pdf.jpeg" alt="Copy Job URL" style="display: block; margin-left: auto; margin-right: auto; width: 20px; cursor: pointer;" /></a> }
                        </Template>
                    </GridColumn>

                    <GridColumn HeaderText="" Width="30px">
                        <Template>
                            @{ var JobID = (context as dtJobRegister).ID;
                                var enc = JobID * 3;
                                <a value="@copyTExt" @onclick="@(() => { CopyToClipboard(enc);  })"><img src="Images/copy.png" alt="Copy Job URL" style="display: block; margin-left: auto; margin-right: auto; width: 20px; cursor: pointer;" /></a>
                            }
                        </Template>
                    </GridColumn>

                    <GridColumn HeaderText="" Width="30px">
                        <Template>
                            @{ var Job = (context as dtJobRegister);

                                <a @onclick="@(() => { SMSPanel(Job);  })"><img src="Images/sms.png" alt="Send SMS" style="display: block; margin-left: auto; margin-right: auto; width: 20px; cursor: pointer;" /></a>
                            }
                        </Template>
                    </GridColumn>

                    <GridColumn HeaderText="" Width="30px">
                        <Template>
                            @{ var Job = (context as dtJobRegister);
                                <a @onclick="@(() => { StatusPanel(Job);  })"><img src="Images/status.png" alt="Add Status" style="display: block; margin-left: auto; margin-right: auto; width: 20px; cursor: pointer;" /></a>
                            }
                        </Template>
                    </GridColumn>

                    <GridColumn Field=@nameof(dtJobRegister.VNo) Format="" HeaderText="Job No" Width="120px"></GridColumn>
                    <GridColumn Field=@nameof(dtJobRegister.PartyName) Format="" HeaderText="Customer" Width="120px"></GridColumn>

                    <GridColumn Field=@nameof(dtJobRegister.Status) Format="" HeaderText="Status" Width="120px">
                        <Template>
                            @{
                                var JobStatus = (context as dtJobRegister).Status;
                                if (JobStatus != "Car Delivered" && !string.IsNullOrEmpty(JobStatus))
                                {
                                    <span style="color: #e60000;">@JobStatus</span>
                                }
                                else if (JobStatus == null || JobStatus == "")
                                {
                                    JobStatus = "New Job";
                                    <span style="color: #e60000;">@JobStatus</span>
                                }
                                else
                                {
                                    <span>@JobStatus</span>
                                }
                            }
                        </Template>
                    </GridColumn>

                    <GridColumn Field=@nameof(dtJobRegister.Field4) HeaderText="Plate No" Width="120px"></GridColumn>
                    <GridColumn Field=@nameof(dtJobRegister.Field1) Format="" HeaderText="Car" Width="150px"></GridColumn>
                    <GridColumn Field=@nameof(dtJobRegister.Field3) Format="" HeaderText="VIN" Width="120px"></GridColumn>
                    <GridColumn Field=@nameof(dtJobRegister.Date5) Format="dd/MM/yyyy" HeaderText="Required Date" Width="150px"></GridColumn>
                    <GridColumn Field=@nameof(dtJobRegister.Date6) Format="mm:HH:ss" HeaderText="Required Time" Width="150px"></GridColumn>
                    <GridColumn Field=@nameof(dtJobRegister.Field7) HeaderText="KM" Width="120px"></GridColumn>
                    <GridColumn Field=@nameof(dtJobRegister.VDate) Format="dd/MM/yyyy" HeaderText="Voucher Date" Width="150px"></GridColumn>
                    <GridColumn Field=@nameof(dtJobRegister.Field2) HeaderText="Color" Width="120px"></GridColumn>
                    <GridColumn Field=@nameof(dtJobRegister.Field9) HeaderText="Checked By" Width="150px"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    }
</div>

<SfDialog Width="550px" IsModal="true" @bind-Visible="CopyVisibility" ShowCloseIcon="true">
    <DialogTemplates>
        <Content>
            <div>
                <h5>Job Link</h5>
                <SfTextBox CssClass="e-success" @bind-Value="@JobURL" Enabled="true"></SfTextBox>

            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

<SfDialog Width="550px" IsModal="true" @bind-Visible="SmsVisibility" ShowCloseIcon="true">
    <DialogTemplates>
        <Content>
            <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsSended" AutoHide="true">
                SMS Sended Succesfully <a><i class="fa fa-check" aria-hidden="true"></i></a>
            </BlazorStrap.BSAlert>
            <div>
                <h5>SMS Panel</h5>
                <div class="row">

                    <div class="col-md-3">
                        <label>To:</label>

                    </div>
                    <div class="col-md-6">
                        <SfTextBox CssClass="e-outline" @bind-Value="@sms.RecNumber" Enabled="true" Placeholder=""></SfTextBox>
                    </div>

                    <div class="col-md-1">
                        <SfButton IconCss="Icon sendSMS" Disabled="@btnSMS" OnClick="@SendSMS" CssClass="e-outline">SMS</SfButton>
                    </div>

                    <div class="col-md-2"></div>

                </div>

                <div class="row mt-1">


                    <div class="col-md-3">
                        <label>Delivery Report:</label>
                    </div>

                    <div class="col-md-6">
                        <SfTextBox CssClass="e-outline" @bind-Value="@sms.Output" Enabled="false" Placeholder=""></SfTextBox>
                    </div>
                    <div class="col-md-1">
                        <SfButton IconCss="Icon clearSMS" Disabled="false" OnClick="@DeliverySMS" CssClass="e-outline">Clear</SfButton>
                    </div>
                    <div class="col-md-2"></div>
                </div>

            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

<SfDialog Width="700px" IsModal="true" @bind-Visible="StatusVisibility" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@SaveAlert" AutoHide="true">
                Successfully Saved <a><i class="fa fa-check" style="color: #039624 " aria-hidden="true"></i></a>
            </BlazorStrap.BSAlert>
            <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@SaveError" AutoHide="true">
                BlazorStrap.BSAlert went wrong...Please try again <a><i class="fa fa-exclamation-triangle" style="color: #721c24 " aria-hidden="true"></i></a>
            </BlazorStrap.BSAlert>
            <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@StatusError" AutoHide="true">
                Please select status before saving  <a><i class="fa fa-exclamation-triangle" style="color: #721c24 " aria-hidden="true"></i></a>
            </BlazorStrap.BSAlert>
        </Header>
        <Content>
            <div class="container-fluid">

                <div class="row">
                    <div class="col-md-12">
                        <label class="label">Curren Status</label>

                        <SfComboBox TItem="string" Enabled="false" AllowCustom="false" @bind-Value="@dtStatus.OldStatus" Placeholder="Select" TValue="string" DataSource="@comboStatus">

                        </SfComboBox>
                    </div>
                </div>

                <div class="row mt-1">

                    <div class="col-md-6">
                        <label class="label">Date</label>
                        <SfDatePicker Placeholder="" Format="dd/MM/yyyy hh:mm" @bind-Value="@dtStatus.StatusDate" Enabled="true"></SfDatePicker>
                    </div>

                    <div class="col-md-6">
                        <label class="label">New Status</label>

                        <SfComboBox TItem="string" AllowCustom="false" @bind-Value="@dtStatus.Status" Placeholder="Select" TValue="string" DataSource="@comboStatus">

                        </SfComboBox>
                    </div>

                </div>

                <div class="row mt-1">
                    <div class="col-md-6">
                        <label class="label">Department</label>
                        <SfComboBox TItem="string" AllowCustom="false" @bind-Value="@dtStatus.Department" Placeholder="Select" TValue="string" DataSource="@Department">

                        </SfComboBox>
                    </div>
                    <div class="col-md-6">
                        <label class="label">Staff</label>

                        <SfComboBox TValue="string" @ref="@ComboStaffRef" AllowCustom="false" TItem="dtAccounts" Enabled="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    @bind-Value="@dtStatus.Staff" CssClass="e-multi-column" AllowFiltering="true"
                                    DataSource="@Staffs" PopupHeight="300px" PopupWidth="300px">
                            <ComboBoxFieldSettings Text="AccountName" Value="AccountName"></ComboBoxFieldSettings>
                            <ComboBoxEvents TValue="string" TItem="dtAccounts" OnValueSelect="OnChangeStaff"></ComboBoxEvents>
                        </SfComboBox>

                    </div>

                </div>

                <div class="row mt-1">
                    <div class="col-md-12">
                        <label class="label">Remarks</label>
                        <SfTextBox Multiline=true @bind-Value="@dtStatus.Remarks" Placeholder="" Enabled="true"></SfTextBox>
                    </div>

                    <div class="col-md-6">


                    </div>
                </div>

            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Save" IsPrimary="true" @onclick="@Save_Click" Disabled="@btnSave" />
        <DialogButton Content="Close" @onclick="@btnClose" Disabled="false" />
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>

@code {
    // [Parameter]
    [Parameter]
    public string copyTExt { get; set; }
    public bool CopyVisibility { get; set; } = false;
    public bool SmsVisibility { get; set; } = false;

    public bool StatusVisibility { get; set; } = false;

    public bool IsCopy = false;
    public bool IsSended = false;
    public bool btnSMS = false;

    public bool StatusError = false;
    public bool SaveAlert = false;
    public bool SaveError = false;

    public string JobURL = "";
    public int VoucherID { get; set; }
    public int StatusID { get; set; }

    public string smsid { get; set; }
    public bool btnSave = false;
    dtSMS sms = new dtSMS();

    DateTime? Today = DateTime.Now;
    DateTime Date = DateTime.Today;
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    SfTextBox search;
    public SfGrid<dtJobRegister> GridJobMaster { get; set; }

    private List<string> Ctypetest;
    public string ID { get; set; }

    public Query StaffQuery { get; set; } = new Query().Take(20);
    private SfComboBox<string, dtAccounts> ComboStaffRef;

    string jsonString = "";
    private List<dtJobRegister> JobData = new List<dtJobRegister>();

    List<dtVoucherStatus> StatusList = new List<dtVoucherStatus>();
    dtVoucherStatus dtStatus = new dtVoucherStatus();
    IEnumerable<string> comboStatus = new List<string>();
    IEnumerable<string> Department = new List<string>();
    List<dtAccounts> Staffs = new List<dtAccounts>();

    int user, BranchID, AccountID, RID;
    public string category;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BranchID = await sessionStorage.GetItemAsync<int>("BranchID");
        user = await sessionStorage.GetItemAsync<int>("LocalSessionUserId");
        category = await sessionStorage.GetItemAsync<string>("usercategory");


        if (user == 0)
        {
            NavigationManager.NavigateTo("Login");
        }
        else
        {
            StatusList = await _Jobs.GetVoucherStatus();
            comboStatus = await _Jobs.getCombos("JobStatus");
            Department = await _Jobs.getCombos("WS_Department");
            Staffs = await _Jobs.GetStaffs();
            Staffs = Staffs.Where(x => x.AccountName == "ANAM" || x.AccountName == "MUHAMMAD FAIZ" || x.AccountName == "UMBAYED"
            || x.AccountName == "MALIK SHAFAQAT ALI" || x.AccountName == "SAFWAN ZAMREEQ - Staff").ToList();

            if (category != "Administrator")
            {
                await this.GridJobMaster.HideColumns("*");
            }
            JobData = await _Jobs.GetAllJob();
        }

        await InvokeAsync(StateHasChanged);
    }

    public void btnClose()
    {
        StatusVisibility = false;
    }

    //private async Task OnFilteringStaff(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    //{

    //    args.PreventDefaultAction = true;
    //    var query = new Query().Where(new WhereFilter() { Field = "AccountName", Operator = "contains", value = args.Text, IgnoreCase = true });
    //    query = !string.IsNullOrEmpty(args.Text) ? query : new Query();
    //    await ComboStaffRef.FilterAsync(Staffs, query);
    //}

    public void OnChangeStaff(SelectEventArgs<dtAccounts> args)
    {
        if (args.ItemData != null)
        {
            dtStatus.Staff = args.ItemData.AccountName;
            //job.Address = args.ItemData.Address1;
            // job.Tel = args.ItemData.Mobile;
            //job.Field12=args.ItemData.



        }

        InvokeAsync(StateHasChanged);
    }

    public async Task Save_Click()
    {
        if (dtStatus.Status != "")
        {
            //dtStatus.VID = StatusID;
            dtStatus.MDate = DateTime.Now;
            dtStatus.MUser = user;

            HttpResponseMessage result = await _Jobs.SaveVoucherStatus(dtStatus);

            if (result.IsSuccessStatusCode)
            {

                dtStatus = new dtVoucherStatus();
                SaveAlert = true;

                await RefreshGrids();


            }
            else
            {
                SaveError = true;
            }
        }

        await InvokeAsync(StateHasChanged);


    }

    public async Task RefreshGrids()
    {
        dtStatus = new dtVoucherStatus();
        JobData = await _Jobs.GetAllJob();
        StatusList = await _Jobs.GetVoucherStatus();
        dtStatus.StatusDate = DateTime.Today;
    }

    private void AddComplaint()
    {
        NavigationManager.NavigateTo("Complaints", true);
    }

    private void EditDetails_Click(int JobID)
    {
        var enc = JobID * 3;
        NavigationManager.NavigateTo("newjob/" + enc.ToString());
    }

    private async Task SendSMS()
    {

        try
        {
            HttpResponseMessage msg = new HttpResponseMessage();
            if (sms.JobID != "" && sms.RecNumber != "")
            {
                msg = await _SmsManager.SendText(sms);
                smsid = msg.Content.ReadAsStringAsync().Result;

                if (!string.IsNullOrEmpty(smsid))
                {
                    btnSMS = true;
                    Thread.Sleep(TimeSpan.FromSeconds(15));

                    IsSended = true;

                    string DeliveryMsg = "";

                    DeliveryMsg = await _SmsManager.DeliveryReport(smsid);
                    sms.Output = DeliveryMsg;

                }


            }
        }
        catch (Exception ex)
        {
            throw ex;
        }


        await InvokeAsync(StateHasChanged);
    }

    private async Task DeliverySMS()
    {
        sms = new dtSMS();
        btnSMS = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task SMSPanel(dtJobRegister job)
    {
        sms.JobID = job.VNo;
        sms.vehicle = job.Field1;
        sms.date = DateTime.Now;
        sms.RecNumber = job.Tel;
        sms.VID = job.ID.ToString();

        SmsVisibility = true;

        await InvokeAsync(StateHasChanged);
    }

    private async Task StatusPanel(dtJobRegister job)
    {
        dtStatus.VID = job.ID;
        dtStatus.OldStatus = job.Status;
        dtStatus.StatusDate = DateTime.Now;

        StatusVisibility = true;

        await InvokeAsync(StateHasChanged);
    }

    private async Task CopyToClipboard(int jobid)
    {


        var link = await _SmsManager.ShortenLink(jobid);

        //copyTExt = jobid.ToString();

        //string copyURL = copyTExt;

        //var uri = NavigationManager.ToAbsoluteUri(copyURL).ToString();

        CopyVisibility = true;

        JobURL = link;

        //try
        //{
        //    IsCopy = true;

        //    await ClipboardService.WriteTextAsync(uri);
        //}
        //catch
        //{
        //    Console.WriteLine("Cannot write text to clipboard");
        //}
    }

    public void ExportPdf()
    {
        this.GridJobMaster.ExportToPdfAsync();
    }

    public void ExcelExport()
    {
        this.GridJobMaster.ExportToExcelAsync();
    }

    public void OnInput(InputEventArgs args)
    {
        this.GridJobMaster.Search(args.Value);
    }


    public void OnSearch(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        if (args.Value != null)
        {
            GridJobMaster.SearchAsync(args.Value);
            this.StateHasChanged();
        }
    }

    public void onCreateSearch()
    {
        this.search.AddIcon("append", "e-upload-picture");

    }

    public void ShowColumnChooser()
    {

        this.GridJobMaster.OpenColumnChooser(200, 50);
    }

    public async Task Clear_Click()
    {


        await GridJobMaster.ClearFilteringAsync();
        await GridJobMaster.Search("");

        // GridJobMaster = await _Jobs.GetAllJob();
        StartDate = null;
        EndDate = null;

    }

    public async Task Search_Click()
    {
        JobData = await _Jobs.GetAllJob();

        if (StartDate != null && EndDate != null)
        {

            try
            {
                JobData = JobData.Where(s => s.VDate.Value.Date >= StartDate.Value.Date && s.VDate.Value.Date <= EndDate.Value.Date).ToList();
            }
            catch (Exception ex)
            { throw ex; }
        }

    }

    public async Task PreviewClick(int id)
    {
        string Url = "ReportViewer?ID=" + id + "&ReportName=Job Report";
        await JSRuntime.InvokeAsync<object>("open", Url, "_blank");
    }

    public async Task PrintClick(int id)
    {
        var Result = await _Bold.GetDocument("Job Report", id.ToString());
        System.IO.MemoryStream ms = new System.IO.MemoryStream();
        Result.FileStream.CopyTo(ms);
        await JSRuntime.InvokeVoidAsync(
                  "jsOpenIntoNewTab",
                  "Job Report.pdf",
                  Convert.ToBase64String(ms.ToArray()));
    }


}
